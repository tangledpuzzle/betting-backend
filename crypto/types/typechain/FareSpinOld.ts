/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace FareSpinOld {
  export type EliminatorStruct = {
    contractModeId: PromiseOrValue<BigNumberish>;
    recordedExpectedValueFloor: PromiseOrValue<BigNumberish>;
    isEliminator: PromiseOrValue<boolean>;
  };

  export type EliminatorStructOutput = [BigNumber, BigNumber, boolean] & {
    contractModeId: BigNumber;
    recordedExpectedValueFloor: BigNumber;
    isEliminator: boolean;
  };

  export type EntryStruct = {
    amount: PromiseOrValue<BigNumberish>;
    contractModeId: PromiseOrValue<BigNumberish>;
    pickedNumber: PromiseOrValue<BigNumberish>;
  };

  export type EntryStructOutput = [BigNumber, BigNumber, BigNumber] & {
    amount: BigNumber;
    contractModeId: BigNumber;
    pickedNumber: BigNumber;
  };
}

export interface FareSpinOldInterface extends utils.Interface {
  functions: {
    "CONTRACT_EXPECTED_VALUE_CEILING()": FunctionFragment;
    "REWARDS_MINT_CAP()": FunctionFragment;
    "batchEntryMap(uint256,address)": FunctionFragment;
    "contractModes(uint256)": FunctionFragment;
    "getAllUsersByRoundId(uint256)": FunctionFragment;
    "getBatchEntryCount(uint256)": FunctionFragment;
    "getCurrentContractModeId()": FunctionFragment;
    "getCurrentRoundId()": FunctionFragment;
    "getEliminatorsByRoundId(uint256)": FunctionFragment;
    "getEntriesByRoundUser(uint256,address)": FunctionFragment;
    "getEntryByIndex(uint256,address,uint256)": FunctionFragment;
    "getEntryCount(uint256,address)": FunctionFragment;
    "getFareTokenAddress()": FunctionFragment;
    "getIsEliminator(uint256,uint256)": FunctionFragment;
    "isRoundPaused()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "placeBatchEntry((uint256,uint256,uint256)[])": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "requestRandomNumber()": FunctionFragment;
    "rewardsAddress()": FunctionFragment;
    "rewardsMint()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setContractExpectedValueFloor(uint256,uint256)": FunctionFragment;
    "setContractMode(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setContractModeEntryLimit(uint256,uint256)": FunctionFragment;
    "setContractModeIsActive(uint256,bool)": FunctionFragment;
    "setContractModeMinMax(uint256,uint256,uint256)": FunctionFragment;
    "setFareToken(address)": FunctionFragment;
    "setPauseContract(bool)": FunctionFragment;
    "setRewardsAddress(address)": FunctionFragment;
    "setRewardsMint(uint256)": FunctionFragment;
    "setRoundPaused(bool)": FunctionFragment;
    "settleBatchEntry(uint256,address)": FunctionFragment;
    "testConcludeRound(bytes32)": FunctionFragment;
    "testFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "vrfCoordinator()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONTRACT_EXPECTED_VALUE_CEILING"
      | "REWARDS_MINT_CAP"
      | "batchEntryMap"
      | "contractModes"
      | "getAllUsersByRoundId"
      | "getBatchEntryCount"
      | "getCurrentContractModeId"
      | "getCurrentRoundId"
      | "getEliminatorsByRoundId"
      | "getEntriesByRoundUser"
      | "getEntryByIndex"
      | "getEntryCount"
      | "getFareTokenAddress"
      | "getIsEliminator"
      | "isRoundPaused"
      | "owner"
      | "paused"
      | "placeBatchEntry"
      | "rawFulfillRandomness"
      | "requestRandomNumber"
      | "rewardsAddress"
      | "rewardsMint"
      | "rounds"
      | "setContractExpectedValueFloor"
      | "setContractMode"
      | "setContractModeEntryLimit"
      | "setContractModeIsActive"
      | "setContractModeMinMax"
      | "setFareToken"
      | "setPauseContract"
      | "setRewardsAddress"
      | "setRewardsMint"
      | "setRoundPaused"
      | "settleBatchEntry"
      | "testConcludeRound"
      | "testFulfillRandomness"
      | "vrfCoordinator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONTRACT_EXPECTED_VALUE_CEILING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARDS_MINT_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchEntryMap",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractModes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsersByRoundId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchEntryCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentContractModeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEliminatorsByRoundId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntriesByRoundUser",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryByIndex",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryCount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFareTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsEliminator",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoundPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBatchEntry",
    values: [FareSpinOld.EntryStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractExpectedValueFloor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractMode",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractModeEntryLimit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractModeIsActive",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractModeMinMax",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFareToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseContract",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsMint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoundPaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBatchEntry",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "testConcludeRound",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "testFulfillRandomness",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_EXPECTED_VALUE_CEILING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARDS_MINT_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchEntryMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractModes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsersByRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchEntryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentContractModeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEliminatorsByRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntriesByRoundUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFareTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsEliminator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRoundPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeBatchEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractExpectedValueFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractModeEntryLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractModeIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractModeMinMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFareToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoundPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBatchEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testConcludeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;

  events: {
    "ContractModeUpdated(uint256)": EventFragment;
    "EntrySettled(uint256,address,bool)": EventFragment;
    "EntrySubmitted(uint256,uint256,address)": EventFragment;
    "NFTMint(uint256,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RandomNumberRequested(bytes32)": EventFragment;
    "RoundConcluded(uint256,bytes32,uint256,uint256)": EventFragment;
    "RoundPausedChanged(bool)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractModeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntrySettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntrySubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomNumberRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundConcluded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundPausedChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ContractModeUpdatedEventObject {
  contractModeId: BigNumber;
}
export type ContractModeUpdatedEvent = TypedEvent<
  [BigNumber],
  ContractModeUpdatedEventObject
>;

export type ContractModeUpdatedEventFilter =
  TypedEventFilter<ContractModeUpdatedEvent>;

export interface EntrySettledEventObject {
  roundId: BigNumber;
  user: string;
  hasMinted: boolean;
}
export type EntrySettledEvent = TypedEvent<
  [BigNumber, string, boolean],
  EntrySettledEventObject
>;

export type EntrySettledEventFilter = TypedEventFilter<EntrySettledEvent>;

export interface EntrySubmittedEventObject {
  roundId: BigNumber;
  batchId: BigNumber;
  user: string;
}
export type EntrySubmittedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  EntrySubmittedEventObject
>;

export type EntrySubmittedEventFilter = TypedEventFilter<EntrySubmittedEvent>;

export interface NFTMintEventObject {
  roundId: BigNumber;
  user: string;
}
export type NFTMintEvent = TypedEvent<[BigNumber, string], NFTMintEventObject>;

export type NFTMintEventFilter = TypedEventFilter<NFTMintEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RandomNumberRequestedEventObject {
  vrfRequestId: string;
}
export type RandomNumberRequestedEvent = TypedEvent<
  [string],
  RandomNumberRequestedEventObject
>;

export type RandomNumberRequestedEventFilter =
  TypedEventFilter<RandomNumberRequestedEvent>;

export interface RoundConcludedEventObject {
  roundId: BigNumber;
  vrfRequestId: string;
  randomNum: BigNumber;
  randomEliminator: BigNumber;
}
export type RoundConcludedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RoundConcludedEventObject
>;

export type RoundConcludedEventFilter = TypedEventFilter<RoundConcludedEvent>;

export interface RoundPausedChangedEventObject {
  isPaused: boolean;
}
export type RoundPausedChangedEvent = TypedEvent<
  [boolean],
  RoundPausedChangedEventObject
>;

export type RoundPausedChangedEventFilter =
  TypedEventFilter<RoundPausedChangedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface FareSpinOld extends BaseContract {
  contractName: "FareSpinOld";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FareSpinOldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_EXPECTED_VALUE_CEILING(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    REWARDS_MINT_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchEntryMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, BigNumber, BigNumber] & {
        batchEntryId: BigNumber;
        user: string;
        settled: boolean;
        totalEntryAmount: BigNumber;
        totalMintAmount: BigNumber;
      }
    >;

    contractModes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        cardinality: BigNumber;
        contractExpectedValueFloor: BigNumber;
        mintMultiplier: BigNumber;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        entryLimit: BigNumber;
        isActive: boolean;
      }
    >;

    getAllUsersByRoundId(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { users: string[] }>;

    getBatchEntryCount(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getCurrentContractModeId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getCurrentRoundId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getEliminatorsByRoundId(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [FareSpinOld.EliminatorStructOutput[]] & {
        eliminators: FareSpinOld.EliminatorStructOutput[];
      }
    >;

    getEntriesByRoundUser(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[FareSpinOld.EntryStructOutput[]]>;

    getEntryByIndex(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      entryIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[FareSpinOld.EntryStructOutput]>;

    getEntryCount(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getFareTokenAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { fareAddress: string }>;

    getIsEliminator(
      roundId: PromiseOrValue<BigNumberish>,
      contractModeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isEliminator: boolean }>;

    isRoundPaused(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    placeBatchEntry(
      entries: FareSpinOld.EntryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rawFulfillRandomness(
      requestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRandomNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardsAddress(overrides?: CallOverrides): Promise<[string]>;

    rewardsMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        id: BigNumber;
        randomNum: BigNumber;
        randomEliminator: BigNumber;
        vrfRequestId: string;
        vrfNum: BigNumber;
      }
    >;

    setContractExpectedValueFloor(
      contractModeId: PromiseOrValue<BigNumberish>,
      _contractExpectedValueFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractMode(
      cardinality: PromiseOrValue<BigNumberish>,
      contractExpectedValueFloor: PromiseOrValue<BigNumberish>,
      mintMultiplier: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      entryLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractModeEntryLimit(
      contractModeId: PromiseOrValue<BigNumberish>,
      entryLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractModeIsActive(
      contractModeId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractModeMinMax(
      contractModeId: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFareToken(
      _fareTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPauseContract(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsAddress(
      _rewardsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsMint(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoundPaused(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleBatchEntry(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testConcludeRound(
      vrfRequestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFulfillRandomness(
      vrfRequestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<[string]>;
  };

  CONTRACT_EXPECTED_VALUE_CEILING(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  REWARDS_MINT_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  batchEntryMap(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean, BigNumber, BigNumber] & {
      batchEntryId: BigNumber;
      user: string;
      settled: boolean;
      totalEntryAmount: BigNumber;
      totalMintAmount: BigNumber;
    }
  >;

  contractModes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      id: BigNumber;
      cardinality: BigNumber;
      contractExpectedValueFloor: BigNumber;
      mintMultiplier: BigNumber;
      minAmount: BigNumber;
      maxAmount: BigNumber;
      entryLimit: BigNumber;
      isActive: boolean;
    }
  >;

  getAllUsersByRoundId(
    roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBatchEntryCount(
    roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentContractModeId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  getEliminatorsByRoundId(
    roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<FareSpinOld.EliminatorStructOutput[]>;

  getEntriesByRoundUser(
    roundId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FareSpinOld.EntryStructOutput[]>;

  getEntryByIndex(
    roundId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    entryIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<FareSpinOld.EntryStructOutput>;

  getEntryCount(
    roundId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFareTokenAddress(overrides?: CallOverrides): Promise<string>;

  getIsEliminator(
    roundId: PromiseOrValue<BigNumberish>,
    contractModeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRoundPaused(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  placeBatchEntry(
    entries: FareSpinOld.EntryStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rawFulfillRandomness(
    requestId: PromiseOrValue<BytesLike>,
    randomness: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRandomNumber(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardsAddress(overrides?: CallOverrides): Promise<string>;

  rewardsMint(overrides?: CallOverrides): Promise<BigNumber>;

  rounds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      id: BigNumber;
      randomNum: BigNumber;
      randomEliminator: BigNumber;
      vrfRequestId: string;
      vrfNum: BigNumber;
    }
  >;

  setContractExpectedValueFloor(
    contractModeId: PromiseOrValue<BigNumberish>,
    _contractExpectedValueFloor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractMode(
    cardinality: PromiseOrValue<BigNumberish>,
    contractExpectedValueFloor: PromiseOrValue<BigNumberish>,
    mintMultiplier: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    maxAmount: PromiseOrValue<BigNumberish>,
    entryLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractModeEntryLimit(
    contractModeId: PromiseOrValue<BigNumberish>,
    entryLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractModeIsActive(
    contractModeId: PromiseOrValue<BigNumberish>,
    isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractModeMinMax(
    contractModeId: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    maxAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFareToken(
    _fareTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPauseContract(
    paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsAddress(
    _rewardsAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsMint(
    percent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoundPaused(
    paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleBatchEntry(
    roundId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testConcludeRound(
    vrfRequestId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFulfillRandomness(
    vrfRequestId: PromiseOrValue<BytesLike>,
    randomness: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vrfCoordinator(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CONTRACT_EXPECTED_VALUE_CEILING(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARDS_MINT_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    batchEntryMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, BigNumber, BigNumber] & {
        batchEntryId: BigNumber;
        user: string;
        settled: boolean;
        totalEntryAmount: BigNumber;
        totalMintAmount: BigNumber;
      }
    >;

    contractModes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        cardinality: BigNumber;
        contractExpectedValueFloor: BigNumber;
        mintMultiplier: BigNumber;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        entryLimit: BigNumber;
        isActive: boolean;
      }
    >;

    getAllUsersByRoundId(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBatchEntryCount(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentContractModeId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    getEliminatorsByRoundId(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<FareSpinOld.EliminatorStructOutput[]>;

    getEntriesByRoundUser(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FareSpinOld.EntryStructOutput[]>;

    getEntryByIndex(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      entryIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<FareSpinOld.EntryStructOutput>;

    getEntryCount(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFareTokenAddress(overrides?: CallOverrides): Promise<string>;

    getIsEliminator(
      roundId: PromiseOrValue<BigNumberish>,
      contractModeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRoundPaused(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    placeBatchEntry(
      entries: FareSpinOld.EntryStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    rawFulfillRandomness(
      requestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestRandomNumber(overrides?: CallOverrides): Promise<string>;

    rewardsAddress(overrides?: CallOverrides): Promise<string>;

    rewardsMint(overrides?: CallOverrides): Promise<BigNumber>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        id: BigNumber;
        randomNum: BigNumber;
        randomEliminator: BigNumber;
        vrfRequestId: string;
        vrfNum: BigNumber;
      }
    >;

    setContractExpectedValueFloor(
      contractModeId: PromiseOrValue<BigNumberish>,
      _contractExpectedValueFloor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractMode(
      cardinality: PromiseOrValue<BigNumberish>,
      contractExpectedValueFloor: PromiseOrValue<BigNumberish>,
      mintMultiplier: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      entryLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractModeEntryLimit(
      contractModeId: PromiseOrValue<BigNumberish>,
      entryLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractModeIsActive(
      contractModeId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractModeMinMax(
      contractModeId: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFareToken(
      _fareTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauseContract(
      paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsAddress(
      _rewardsAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsMint(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoundPaused(
      paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBatchEntry(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    testConcludeRound(
      vrfRequestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testFulfillRandomness(
      vrfRequestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vrfCoordinator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ContractModeUpdated(uint256)"(
      contractModeId?: PromiseOrValue<BigNumberish> | null
    ): ContractModeUpdatedEventFilter;
    ContractModeUpdated(
      contractModeId?: PromiseOrValue<BigNumberish> | null
    ): ContractModeUpdatedEventFilter;

    "EntrySettled(uint256,address,bool)"(
      roundId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      hasMinted?: null
    ): EntrySettledEventFilter;
    EntrySettled(
      roundId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      hasMinted?: null
    ): EntrySettledEventFilter;

    "EntrySubmitted(uint256,uint256,address)"(
      roundId?: PromiseOrValue<BigNumberish> | null,
      batchId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): EntrySubmittedEventFilter;
    EntrySubmitted(
      roundId?: PromiseOrValue<BigNumberish> | null,
      batchId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): EntrySubmittedEventFilter;

    "NFTMint(uint256,address)"(
      roundId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): NFTMintEventFilter;
    NFTMint(
      roundId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): NFTMintEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RandomNumberRequested(bytes32)"(
      vrfRequestId?: PromiseOrValue<BytesLike> | null
    ): RandomNumberRequestedEventFilter;
    RandomNumberRequested(
      vrfRequestId?: PromiseOrValue<BytesLike> | null
    ): RandomNumberRequestedEventFilter;

    "RoundConcluded(uint256,bytes32,uint256,uint256)"(
      roundId?: PromiseOrValue<BigNumberish> | null,
      vrfRequestId?: PromiseOrValue<BytesLike> | null,
      randomNum?: null,
      randomEliminator?: null
    ): RoundConcludedEventFilter;
    RoundConcluded(
      roundId?: PromiseOrValue<BigNumberish> | null,
      vrfRequestId?: PromiseOrValue<BytesLike> | null,
      randomNum?: null,
      randomEliminator?: null
    ): RoundConcludedEventFilter;

    "RoundPausedChanged(bool)"(isPaused?: null): RoundPausedChangedEventFilter;
    RoundPausedChanged(isPaused?: null): RoundPausedChangedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    CONTRACT_EXPECTED_VALUE_CEILING(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARDS_MINT_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    batchEntryMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractModes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllUsersByRoundId(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatchEntryCount(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentContractModeId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    getEliminatorsByRoundId(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntriesByRoundUser(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntryByIndex(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      entryIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntryCount(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFareTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getIsEliminator(
      roundId: PromiseOrValue<BigNumberish>,
      contractModeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRoundPaused(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    placeBatchEntry(
      entries: FareSpinOld.EntryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRandomNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsMint(overrides?: CallOverrides): Promise<BigNumber>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContractExpectedValueFloor(
      contractModeId: PromiseOrValue<BigNumberish>,
      _contractExpectedValueFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractMode(
      cardinality: PromiseOrValue<BigNumberish>,
      contractExpectedValueFloor: PromiseOrValue<BigNumberish>,
      mintMultiplier: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      entryLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractModeEntryLimit(
      contractModeId: PromiseOrValue<BigNumberish>,
      entryLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractModeIsActive(
      contractModeId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractModeMinMax(
      contractModeId: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFareToken(
      _fareTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPauseContract(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsAddress(
      _rewardsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsMint(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoundPaused(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleBatchEntry(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testConcludeRound(
      vrfRequestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFulfillRandomness(
      vrfRequestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vrfCoordinator(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_EXPECTED_VALUE_CEILING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARDS_MINT_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchEntryMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractModes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllUsersByRoundId(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchEntryCount(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentContractModeId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEliminatorsByRoundId(
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntriesByRoundUser(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntryByIndex(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      entryIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntryCount(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFareTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsEliminator(
      roundId: PromiseOrValue<BigNumberish>,
      contractModeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRoundPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBatchEntry(
      entries: FareSpinOld.EntryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRandomNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContractExpectedValueFloor(
      contractModeId: PromiseOrValue<BigNumberish>,
      _contractExpectedValueFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractMode(
      cardinality: PromiseOrValue<BigNumberish>,
      contractExpectedValueFloor: PromiseOrValue<BigNumberish>,
      mintMultiplier: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      entryLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractModeEntryLimit(
      contractModeId: PromiseOrValue<BigNumberish>,
      entryLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractModeIsActive(
      contractModeId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractModeMinMax(
      contractModeId: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFareToken(
      _fareTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPauseContract(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsAddress(
      _rewardsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsMint(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoundPaused(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleBatchEntry(
      roundId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testConcludeRound(
      vrfRequestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFulfillRandomness(
      vrfRequestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

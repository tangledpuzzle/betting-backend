/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace FareNFTLootBoxController {
  export type LootTableItemStruct = {
    itemId: PromiseOrValue<BigNumberish>;
    weight: PromiseOrValue<BigNumberish>;
  };

  export type LootTableItemStructOutput = [BigNumber, BigNumber] & {
    itemId: BigNumber;
    weight: BigNumber;
  };
}

export interface FareNFTLootBoxControllerInterface extends utils.Interface {
  functions: {
    "fareItems()": FunctionFragment;
    "fareLootBox()": FunctionFragment;
    "getLatestLootTableId()": FunctionFragment;
    "getLootItemCount(uint256)": FunctionFragment;
    "lootBoxMap(uint256)": FunctionFragment;
    "lootTableMap(uint256,uint256)": FunctionFragment;
    "lootTableWeightMap(uint256)": FunctionFragment;
    "openLootBox(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardLootBoxToken(uint8,uint256,address)": FunctionFragment;
    "selectedLootTableId()": FunctionFragment;
    "setItemThrehold(uint256)": FunctionFragment;
    "setLootTable((uint256,uint256)[])": FunctionFragment;
    "setSelectedLootTableId(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fareItems"
      | "fareLootBox"
      | "getLatestLootTableId"
      | "getLootItemCount"
      | "lootBoxMap"
      | "lootTableMap"
      | "lootTableWeightMap"
      | "openLootBox"
      | "owner"
      | "renounceOwnership"
      | "rewardLootBoxToken"
      | "selectedLootTableId"
      | "setItemThrehold"
      | "setLootTable"
      | "setSelectedLootTableId"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "fareItems", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fareLootBox",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestLootTableId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLootItemCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lootBoxMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lootTableMap",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lootTableWeightMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openLootBox",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardLootBoxToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selectedLootTableId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setItemThrehold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLootTable",
    values: [FareNFTLootBoxController.LootTableItemStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSelectedLootTableId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "fareItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fareLootBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestLootTableId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLootItemCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lootBoxMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lootTableMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lootTableWeightMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLootBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardLootBoxToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectedLootTableId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemThrehold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLootTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSelectedLootTableId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface FareNFTLootBoxController extends BaseContract {
  contractName: "FareNFTLootBoxController";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FareNFTLootBoxControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fareItems(overrides?: CallOverrides): Promise<[string]>;

    fareLootBox(overrides?: CallOverrides): Promise<[string]>;

    getLatestLootTableId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLootItemCount(
      lootTableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lootBoxMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber] & {
        isOpened: boolean;
        rarity: number;
        lootTableId: BigNumber;
        itemThreshold: BigNumber;
      }
    >;

    lootTableMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { itemId: BigNumber; weight: BigNumber }
    >;

    lootTableWeightMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openLootBox(
      lootBoxId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardLootBoxToken(
      rarity: PromiseOrValue<BigNumberish>,
      itemThreshold: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selectedLootTableId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setItemThrehold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLootTable(
      lootTableItems: FareNFTLootBoxController.LootTableItemStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSelectedLootTableId(
      lootTableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  fareItems(overrides?: CallOverrides): Promise<string>;

  fareLootBox(overrides?: CallOverrides): Promise<string>;

  getLatestLootTableId(overrides?: CallOverrides): Promise<BigNumber>;

  getLootItemCount(
    lootTableId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lootBoxMap(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber] & {
      isOpened: boolean;
      rarity: number;
      lootTableId: BigNumber;
      itemThreshold: BigNumber;
    }
  >;

  lootTableMap(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { itemId: BigNumber; weight: BigNumber }>;

  lootTableWeightMap(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openLootBox(
    lootBoxId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardLootBoxToken(
    rarity: PromiseOrValue<BigNumberish>,
    itemThreshold: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selectedLootTableId(overrides?: CallOverrides): Promise<BigNumber>;

  setItemThrehold(
    newThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLootTable(
    lootTableItems: FareNFTLootBoxController.LootTableItemStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSelectedLootTableId(
    lootTableId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fareItems(overrides?: CallOverrides): Promise<string>;

    fareLootBox(overrides?: CallOverrides): Promise<string>;

    getLatestLootTableId(overrides?: CallOverrides): Promise<BigNumber>;

    getLootItemCount(
      lootTableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lootBoxMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber] & {
        isOpened: boolean;
        rarity: number;
        lootTableId: BigNumber;
        itemThreshold: BigNumber;
      }
    >;

    lootTableMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { itemId: BigNumber; weight: BigNumber }
    >;

    lootTableWeightMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLootBox(
      lootBoxId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardLootBoxToken(
      rarity: PromiseOrValue<BigNumberish>,
      itemThreshold: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    selectedLootTableId(overrides?: CallOverrides): Promise<BigNumber>;

    setItemThrehold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLootTable(
      lootTableItems: FareNFTLootBoxController.LootTableItemStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSelectedLootTableId(
      lootTableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    fareItems(overrides?: CallOverrides): Promise<BigNumber>;

    fareLootBox(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestLootTableId(overrides?: CallOverrides): Promise<BigNumber>;

    getLootItemCount(
      lootTableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lootBoxMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lootTableMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lootTableWeightMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLootBox(
      lootBoxId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardLootBoxToken(
      rarity: PromiseOrValue<BigNumberish>,
      itemThreshold: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selectedLootTableId(overrides?: CallOverrides): Promise<BigNumber>;

    setItemThrehold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLootTable(
      lootTableItems: FareNFTLootBoxController.LootTableItemStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSelectedLootTableId(
      lootTableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fareItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fareLootBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestLootTableId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLootItemCount(
      lootTableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lootBoxMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lootTableMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lootTableWeightMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLootBox(
      lootBoxId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardLootBoxToken(
      rarity: PromiseOrValue<BigNumberish>,
      itemThreshold: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selectedLootTableId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setItemThrehold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLootTable(
      lootTableItems: FareNFTLootBoxController.LootTableItemStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSelectedLootTableId(
      lootTableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
